@startuml
!theme toy

namespace shapes <<Rectangle>> {

    abstract Shape {
        /'
         ' - float x0
         ' - float y0
         '/
        - gdi::Color color
        - float angle
        --
        .. Getters and setters ..
        /'
         ' + {abstract} void drawToContext(context, float x, float y)
         '/
        + {abstract} float getWidth()
        + {abstract} float getHeight()
    }
    Shape --|> gdi.Drawable
    Shape::color - gdi.Color

    class Ellipse {
        - float r1
        - float r2
        --
        + Ellipse()
        .. Getters and setters ..
    }

    class Circle {
        + Circle(radius)
        .. Getters and setters ..
    }

    note "Constructor and setters set r1,r2/width,height to same value" as SameNote
    Circle .. SameNote

    class Rectangle {
        - float width
        - float height
        --
        + Rectangle()
        .. Getters and setters ..
    }

    class Square {
        + Square(side)
        .. Getters and setters ..
    }
    Square .. SameNote

    class Triangle {
        - float base
        - float height
        --
        + Triangle(base, height)
        + Triangle(p0, p1, p2)
        .. Getters and setters ..
    }

    class Polygon {
        - GLfloat* arr
        --
        + Polygon(GLfloat* arr)
        .. Getters and setters ..
    }

    class Bezier

    /'   Relations
       ============= '/

    Shape      <|-- Ellipse
    Ellipse    <|-- Circle

    Shape      <|-- Rectangle
    Rectangle  <|-- Square

    Shape      <|-- Triangle

    Polygon -|> Shape
    Shape <|--- Bezier

}

namespace gdi <<Rectangle>> {
    class Color << (S, #FF7700) Struct >> {
        uint8_t red
        uint8_t green
        uint8_t blue
    }

    class Context {}

    interface Drawable {
        {abstract} void drawToContext(Context c, float x, float y)
    }

}

/'
 ' package "window and shapes controller" <<Rectangle>> {
 '     Window "1" o-- "many" Shape : has
 ' }
 '/
@enduml
